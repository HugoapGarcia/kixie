{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getXML","fetch","then","response","text","data","xml","DOMParser","parseFromString","document","getElementById","textContent","console","log","list","users","getElementsByTagName","i","length","names","li","createElement","j","childNodes","nodeValue","appendChild","xmlData","chat","user","createTextNode","content","name","xhttp","XMLHttpRequest","endpoint","open","onreadystatechange","readyState","status","res","alert","setRequestHeader","send","sendXML","processFile","generateUrl","delay","Math","floor","random","getServerUrls","testUrl","url","a","Axios","get","timeout","HealthCheckerRefractored","urls","useState","listOfUrls","setListOfUrls","isCompleted","setIsCompleted","autoCheck","setAutoCheck","time","runTestUrl","index","onpress","map","v","btnOnPress","statusResponse","updated","value","test","textColor","window","clearTimeout","completed","push","setTimeout","useEffect","autoCheckOnSync","onClick","className","e","App","toggle","setToggle","src","width","height","frameBorder","allow","allowFullScreen","title","allowFullFcreen","viewBox","xmlns","class","fill-rule","clip-rule","d","fill","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.13416f94.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport \"./index.css\";\nimport { useEffect } from \"react/cjs/react.development\";\n\n/*** Retreive XML File */\nfunction getXML() {\n  let url = \"https://codetogo.io/api/users.xml\";\n  fetch(url)\n    .then(response => response.text())\n    .then(data => {\n      //console.log(data);  //string\n      let parser = new DOMParser();\n      let xml = parser.parseFromString(data, \"application/xml\");\n      document.getElementById('output').textContent = data;\n      console.log(xml);\n\n      //read xml\n      xmlData(xml)\n\n      //process xml\n      processFile(xml)\n\n    });\n\n}\n\n/*** Example of how to display values of xml from response */\nfunction xmlData(xml) {\n  let list = document.getElementById('users');\n  let users = xml.getElementsByTagName(\"user\");\n\n  for (let i = 0; i < users.length; i++) {\n    let user = users[i];\n    let names = user.getElementsByTagName(\"name\");\n\n    let li = document.createElement('li');\n\n    for (let j = 0; j < names.length; j++) {\n      //alert(names[j].childNodes[0].nodeValue);\n      li.textContent = names[j].childNodes[0].nodeValue;\n      list.appendChild(li);\n    }\n  }\n}\n\n/*** Example of how to send new xml to specific endpoint */\nfunction sendXML(xml, name) {\n  const xhttp = new XMLHttpRequest();\n  let endpoint= '';\n  xhttp.open(\"POST\", endpoint);\n  xhttp.onreadystatechange = () => {\n    if (xhttp.readyState === 4 && xhttp.status === 200) {\n      const res = xhttp.response;\n      alert(`${res}: ${name}`);\n    }\n  };\n  xhttp.setRequestHeader(\"Content-Type\", \"text/xml\");\n  xhttp.send(xml);\n}\n\n/*** Example of how to process file, adding new values to existin xml from response */\nfunction processFile(data) {\n  var chat = data.createElement(\"user\");\n\n  var user = data.createElement(\"id\");\n  user.appendChild(data.createTextNode(\"1\"));\n  \n  var content = data.createElement(\"name\");\n  content.appendChild(data.createTextNode(\"Karla\"));\n  \n  chat.appendChild(user);\n  chat.appendChild(content);\n  \n  data.getElementsByTagName(\"users\")[0].appendChild(chat);\n\n  console.log(data); //check the updated new XML\n  sendXML(data, 'newXML')\n}\n\n/** Internal function to generate server links */\nfunction generateUrl() {\n  const delay = Math.floor(Math.random() * 3);\n  return `https://httpbin.org/delay/${delay}?delay=${delay}`;\n}\n/**\n * server links to test\n * @example\n *  ['https://httpbin.org/get', 'https://jsonplaceholder.typicode.com/todos/1', 'https://bad-url-abc-1234.gov']\n * @returns {string[]} Array of URLs\n */\nconst getServerUrls = () => [generateUrl(), generateUrl(), generateUrl()];\n/**\n * Function to test the url\n * @param {string} url URL to test\n * @returns {boolean} True if server alive and false if dead\n */\nasync function testUrl(url) {\n  try {\n    console.log(\"testing: \" + url);\n    await Axios.get(url, {\n      timeout: 1900\n    });\n    console.log(\"%cpass: \" + url, \"color: green\");\n    return true;\n  } catch (_exception) {\n    console.log(\"%cfail: \" + url, \"color: red\");\n    // console.log(exception);\n    return false;\n  }\n}\n\n/** Component that performs health check from getServerUrls() */\nfunction HealthCheckerRefractored({ urls }) {\n  //states\n  const [listOfUrls, setListOfUrls] = useState(urls);\n  const [isCompleted, setIsCompleted] = useState([]);\n  const [autoCheck, setAutoCheck] = useState(false);\n  //setTimer\n  let time = null;\n\n  useEffect(() => {\n    // autocheck will execute only if autcheck is true\n    if (autoCheck) autoCheckOnSync()\n    if (!autoCheck) { clearTimeout(time) };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoCheck, isCompleted])\n\n  /**\n  * \n  * @param {*} url \n  * @param {*} index \n  * @returns boolean\n  * @description Run specific url to test and update the state to populate UI.\n  */\n  async function runTestUrl(url, index) {\n    let onpress = listOfUrls.map((v, i) => { if (i === index) v.btnOnPress = 'active'; return v })\n    setListOfUrls(onpress)\n\n    const statusResponse = await testUrl(url);\n\n    let updated = listOfUrls.map((value, i) => {\n      if (value.url === url && index === i) {\n        value.test = statusResponse ? 'pass' : 'fail';\n        value.textColor = statusResponse ? 'pass' : 'fail';\n        value.btnOnPress = '';\n        value.isCompleted = true\n      }\n      return value\n    })\n    setListOfUrls(updated);\n    //console.log(updated)\n    return updated[index].isCompleted ? 'completed' : 'untested'\n  }\n\n  /**\n* Fetch new generated urls and set to state.\n*/\n  function getResetNewUrls() {\n    setListOfUrls(getServerUrls().map((url) => { return { url: url, test: 'untested', textColor: '', btnOnPress: '' } }));\n  }\n\n  /**\n * \n * @returns array\n * @description Run auto check for all the url in the array syncronized with response\n * and set state for all submitions completed.\n */\n  async function autoCheckOnSync() {\n    window.clearTimeout(time);\n    if (!autoCheck) return;\n\n    //reset values to be test check \n    setListOfUrls(listOfUrls.map((url) => { return { url: url.url, test: 'untested', textColor: '', btnOnPress: '' } }));\n    let completed = [];\n\n    //console.log(autoCheck)\n\n    for (let i = 0; i < listOfUrls.length; i++) {\n      await runTestUrl(listOfUrls[i].url, i).then((res) => {\n        completed.push(res)\n      })\n    }\n\n\n    console.log('All test are done, syste will re-test every 5 seconds:', completed)\n    if (completed.length === listOfUrls.length) {\n\n      time = setTimeout(() => {\n        setIsCompleted(completed)\n      }, 5000)\n    }\n    return completed\n\n  }\n\n  return (\n    <div>\n      <h3>Health Checker Component</h3>\n      <button onClick={() => getResetNewUrls()}>Get New URLs</button>\n      <button className={autoCheck ? 'active' : ''} onClick={(e) => setAutoCheck(!autoCheck)}>Auto-check</button>\n      <ul>\n        {\n          listOfUrls.map((url, i) => {\n            return (\n              <li key={i}>\n                {`server ${i} :  ${url.url}`}\n                <button className={url.btnOnPress} onClick={(e) => runTestUrl(url.url, i)}>test</button>\n                <br />\n                <br />\n                <span className={url.textColor}>{url.test}</span>\n                <br />\n                <br />\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  );\n}\n\n/** App component will render show button to start the health checker */\nexport default function App() {\n  /***state */\n  const [toggle, setToggle] = useState(false);\n\n  //set list of items array\n  const [listOfUrls] = useState(getServerUrls().map((url) => { return { url: url, test: 'untested', textColor: '', btnOnPress: '' } }));\n\n\n  return (\n    <div className=\"App\">\n      <h2>Server Health Check Page</h2>\n      <hr />\n      <button onClick={(e) => setToggle(!toggle)}>Show Health Checker</button>\n      {toggle\n        ?\n        <HealthCheckerRefractored urls={listOfUrls} />\n        : (false)}\n      <br />\n      <br />\n      <br />\n      <hr />\n      <h3>Requirements</h3>\n      <h4>Part 1:</h4>\n      Suppose we have an array of URLs that needs to be tested. You are asked to\n      build a reusable component that can display the list of URLs, their status\n      and show buttons that can be used to test the URLs.\n      <p>\n        A) Update the code so when the “Show Health Checker” button is pressed:\n      </p>\n      <ol>\n        <li>We show/hide the \"HealthChecker\" component</li>\n        <li>\n          Update \"HealthChecker\" component so it would call the getServerUrls()\n          function to get a list of URLS\n        </li>\n        <li>\n          Update the component to display each URL with its own test button\n          instead of the text \"LIST THE LINKS WITH TEST BUTTONS HERE\". Show the\n          \"untested\" status text underneath.\n        </li>\n      </ol>\n      B) Update your code so that when a Test button is pressed you would:\n      <ol>\n        <li>Call testUrl to perform the test for each URL</li>\n        <li>\n          Change the color of the button before calling testUrl to indicate it’s\n          being tested\n        </li>\n        <li>\n          Show the result underneath the URL as such:\n          <ul>\n            <li>If testUrl() returns true show \"pass\" in green.</li>\n            <li>If testUrl() returns false show \"fail\" in red.</li>\n          </ul>\n        </li>\n        <li>\n          Reset the color of the button back to indicate the test has ended\n        </li>\n      </ol>\n      <p>\n        <b>Recommendation:</b> Make the UI/layout as close as to what you see in\n        the video below.\n      </p>\n      <iframe\n        src=\"https://player.vimeo.com/video/556437590\"\n        width=\"640\"\n        height=\"478\"\n        frameBorder=\"0\"\n        allow=\"autoplay; fullscreen; picture-in-picture\"\n        allowFullScreen\n        title=\"Part1\"\n      ></iframe>\n      <h4>Part 2:</h4>\n      Add a \"Get new URLs\" Button that when pressed gets new set of Urls.\n      Replace the previous Urls with the new ones and reset the results\n      underneath each Url to “untested”.\n      <p>\n        <b>Note:</b> Since the URLs are dynamically generated please make sure\n        hitting Test button does not regenerate new URLs.\n      </p>\n      <h4>Part 3:</h4>\n      Suppose we want to continuously test the URLs to detect whether the server\n      is alive or dead.\n      <ol>\n        <li>\n          Add an \"Auto-check\" button that automatically tests each URL every 5\n          seconds.\n        </li>\n        <li>\n          The \"Auto-check\" button is a <b>TOGGLE</b> where re-pressing it will\n          stop the automatic testing of the URLs.\n        </li>\n        <li>\n          <b>Note:</b> Pressing the “Get New URLs” button during the automatic\n          tests should generate new URLs with status of untested. The new URLs\n          should be tested in the next 5 second round.\n        </li>\n      </ol>\n      <iframe\n        src=\"https://player.vimeo.com/video/556396090?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479\"\n        width=\"640\"\n        height=\"550\"\n        frameBorder=\"0\"\n        allow=\"autoplay; fullscreen; picture-in-picture\"\n        allowFullFcreen\n        title=\"Part 2-3\"\n      ></iframe>\n      <h4>Extra Credit</h4>\n      <ul>\n        <li>\n          Clicking Auto-check will immediatly check the URLs and then wait 5\n          seconds before the next run\n        </li>\n        <li>\n          Clicking Auto-check will test ALL the URLs synchronously at the same\n          time\n        </li>\n      </ul>\n      <h3>CodeSandbox Auto Preview</h3>\n      <p>\n        By default CodeSandbox has Preview On Edit turned on. As such when you\n        are coding the Browser section of CodeSandbox will refresh automatically\n        and show errors. This behaviour can be turned off so that the browser is\n        only updated when you save a file. Follow steps below to turn off\n        Preview On Edit:\n        <ol>\n          <li>\n            Click on{\" \"}\n            <svg\n              viewBox=\"0 0 10 7\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"14\"\n              height=\"10\"\n              class=\"sc-bdnylx eoHNwX\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M7.5 5.806H0v.944h7.5v-.944zm2.25-2.903H0v.944h9.75v-.944zM0 0h9.75v.944H0V0z\"\n                fill=\"currentColor\"\n              ></path>\n            </svg>{\" \"}\n            menu icon next to your name on top left hand side of this page\n          </li>\n          <li>Select File | Preferences | CodeSandbox Settings</li>\n          <li>Select Preview Tab</li>\n          <li>Turn off \"Preview on edit\"</li>\n        </ol>\n      </p>\n      <br />\n      <br />\n      <br />\n      <hr />\n      <button onClick={(e) => getXML(e)}>Get XML</button>\n      <h3>XML DATA:</h3>\n      <ul id=\"swords\"></ul>\n      <ul id=\"users\"></ul>\n      <h2>Current XML Response :</h2>\n      <pre id=\"output\"></pre>\n    </div>\n  );\n}\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}